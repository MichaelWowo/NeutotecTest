description = "Biometrics Tutorials Android"

apply plugin: 'com.android.application'

def productRootDir = "../../../.."
def productBinDir = new File(productRootDir, "Bin")
def productBinAndroidDir = new File(productBinDir, "Android")
def productLibAndroidDir = new File(productRootDir, "Lib/Android")
def archUsed = "arm64-v8a,armeabi-v7a,x86"

def usedNdfList = ["FacesDetect45.ndf",
					"FacesDetect180.ndf",
					"FacesDetectSegmentsAttributes.ndf",
					"FacesDetectSegmentsOrientation.ndf",
					"FacesDetectSegmentsFeaturePointsTrack.ndf",
					"FacesDetectSegmentsLiveness.ndf",
					"FacesCreateTemplateSmall.ndf",
					"FacesCreateTemplateMedium.ndf",
					"FacesDetect90.ndf",
					"FacesDetectSegmentsFeaturePointsDetect.ndf",
					"FacesDetectSegmentsOrientation90.ndf",
					"FacesCreateTemplateQuality.ndf",
					"Irises.ndf",
					"Fingers.ndf",
					"Voices.ndf"]

buildscript {
	System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'
	repositories {
		google()
		jcenter()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:3.2.1'
	}
}

android {
	compileSdkVersion 27

	defaultConfig {
		minSdkVersion 23
		targetSdkVersion 26

		ndk {
			abiFilters 'x86', 'armeabi-v7a', 'arm64-v8a'
		}
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
	lintOptions {
		abortOnError false
	}
	signingConfigs {
		debug {
			keyAlias 'CredenceIDPublicKey'
			keyPassword 'CredenceID'
			storeFile file('../../../../../CredencePublicKeys/PublicKey.jks')
			storePassword 'CredenceID'
		}
		release {
			keyAlias 'CredenceIDPublicKey'
			keyPassword 'CredenceID'
			storeFile file('../../../../../CredencePublicKeys/PublicKey.jks')
			storePassword

		}
	}
	buildTypes {
		debug {
			minifyEnabled false
			//signingConfig signingConfigs.debug
		}
	}
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:deprecation"
	}
}

task deleteTemporaryFiles(type: Delete) {
	for (String file : usedNdfList) {
		delete "${android.sourceSets.main.assets.srcDirs[0]}/data/${file}.jet"
	}
	delete "${android.sourceSets.main.jniLibs.srcDirs[0]}"
}

clean {
	delete fileTree(dir: productBinAndroidDir , include: "${"biometrics-tutorials"}*.*")
}

task prepareNdfFiles(type: Copy) {
	from "${productBinDir}/Data"
	includes = usedNdfList
	rename { String fileName ->
		fileName.replace('.ndf', '.ndf.jet')
	}
	into "${android.sourceSets.main.assets.srcDirs[0]}/data"
}

int counter = 1
archUsed.split(',').each {
	String srcDir = "${productLibAndroidDir}/${it}"
	String dstDir = "${android.sourceSets.main.jniLibs.srcDirs[0]}/${it}"
	task "prepareNativeLibs$counter"(type: Copy) {
		from srcDir
		into dstDir
		dependsOn(prepareNdfFiles)
	}
	tasks.preBuild.dependsOn("prepareNativeLibs$counter")
	counter++
}

task publishApk(type: Copy) {
	from "${project.buildDir}/outputs/apk/debug"
	include "${project.archivesBaseName}-debug.apk"
	rename "${project.archivesBaseName}-debug.apk", "${project.archivesBaseName}.apk"
	into productBinAndroidDir
}

clean.dependsOn(deleteTemporaryFiles)
prepareNdfFiles.dependsOn(clean)
build.finalizedBy(publishApk)

dependencies {
	implementation fileTree(include: ['*.jar'], dir: 'libs')
	api "com.android.support:support-compat:27.1.1"
	api ":jna"
}

repositories {
	mavenLocal()
	google()
	jcenter()
	mavenCentral()
	flatDir {
		dirs "${productBinAndroidDir}/"
	}
}